ccopy_reg
_reconstructor
p1
(c__main__
LogisticRegression
p2
c__builtin__
object
p3
NtRp4
(dp5
S'b'
g1
(ctheano.tensor.sharedvar
TensorSharedVariable
p6
g3
NtRp7
(dp8
S'auto_name'
p9
S'auto_20512'
p10
sS'index'
p11
NsS'tag'
p12
(itheano.gof.utils
scratchpad
p13
(dp14
S'trace'
p15
(lp16
(lp17
(S'<stdin>'
p18
I1
S'<module>'
p19
Ntp20
a(S'/usr/lib/python2.7/dist-packages/spyderlib/widgets/externalshell/sitecustomize.py'
p21
I540
S'runfile'
p22
S'execfile(filename, namespace)'
tp23
a(S'/home/kitware/git/NEX/handWritingEx/logistic_sgd.py'
p24
I589
g19
S'sgd_optimization_mnist()'
tp25
a(S'/home/kitware/git/NEX/handWritingEx/logistic_sgd.py'
p26
I378
S'sgd_optimization_mnist'
p27
S'classifier = LogisticRegression(input=x, n_in=91, n_out=2)'
tp28
a(S'/home/kitware/git/NEX/handWritingEx/logistic_sgd.py'
p29
I102
S'__init__'
p30
S'borrow=True'
tp31
aasbsS'container'
p32
g1
(ctheano.gof.link
Container
p33
g3
NtRp34
(dp35
S'name'
p36
S'b'
sS'storage'
p37
(lp38
cnumpy.core.multiarray
_reconstruct
p39
(cnumpy
ndarray
p40
(I0
tS'b'
tRp41
(I1
(I2
tcnumpy
dtype
p42
(S'f8'
I0
I1
tRp43
(I3
S'<'
NNNI-1
I-1
I0
tbI00
S'hF\x90\xbb\xd2\xf3\x01@zF\x90\xbb\xd2\xf3\x01\xc0'
tbasS'strict'
p44
I00
sS'readonly'
p45
I00
sS'type'
p46
g1
(ctheano.tensor.type
TensorType
p47
g3
NtRp48
(dp49
S'broadcastable'
p50
(I00
tp51
sS'dtype'
p52
S'float64'
p53
sS'numpy_dtype'
p54
g43
sS'sparse_grad'
p55
I00
sg36
NsbsS'allow_downcast'
p56
Nsbsg36
S'b'
sS'owner'
p57
Nsg46
g48
sbsS'y_pred'
p58
g1
(ctheano.tensor.var
TensorVariable
p59
g3
NtRp60
(dp61
g9
S'auto_20522'
p62
sg11
I1
sg12
(itheano.gof.utils
scratchpad
p63
(dp64
g15
(lp65
(lp66
(g18
I1
g19
Ntp67
a(g21
I540
g22
S'execfile(filename, namespace)'
tp68
a(g24
I589
g19
S'sgd_optimization_mnist()'
tp69
a(g26
I378
g27
S'classifier = LogisticRegression(input=x, n_in=91, n_out=2)'
tp70
a(g29
I117
g30
S'self.y_pred = T.argmax(self.p_y_given_x, axis=1)'
tp71
aasbsg36
S'argmax'
p72
sg57
g1
(ctheano.gof.graph
Apply
p73
g3
NtRp74
(dp75
S'inputs'
p76
(lp77
g1
(g59
g3
NtRp78
(dp79
g9
S'auto_20519'
p80
sg11
I0
sg12
(itheano.gof.utils
scratchpad
p81
(dp82
g15
(lp83
(lp84
(g18
I1
g19
Ntp85
a(g21
I540
g22
S'execfile(filename, namespace)'
tp86
a(g24
I589
g19
S'sgd_optimization_mnist()'
tp87
a(g26
I378
g27
S'classifier = LogisticRegression(input=x, n_in=91, n_out=2)'
tp88
a(g29
I113
g30
S'self.p_y_given_x = T.nnet.softmax(T.dot(input, self.W) + self.b)'
tp89
aasbsg36
Nsg57
g1
(g73
g3
NtRp90
(dp91
g76
(lp92
g1
(g59
g3
NtRp93
(dp94
g9
S'auto_20518'
p95
sg11
I0
sg12
(itheano.gof.utils
scratchpad
p96
(dp97
g15
(lp98
(lp99
(g18
I1
g19
Ntp100
a(g21
I540
g22
S'execfile(filename, namespace)'
tp101
a(g24
I589
g19
S'sgd_optimization_mnist()'
tp102
a(g26
I378
g27
S'classifier = LogisticRegression(input=x, n_in=91, n_out=2)'
tp103
a(g29
I113
g30
S'self.p_y_given_x = T.nnet.softmax(T.dot(input, self.W) + self.b)'
tp104
aasbsg36
Nsg57
g1
(g73
g3
NtRp105
(dp106
g76
(lp107
g1
(g59
g3
NtRp108
(dp109
g9
S'auto_20513'
p110
sg11
I0
sg12
(itheano.gof.utils
scratchpad
p111
(dp112
g15
(lp113
(lp114
(g18
I1
g19
Ntp115
a(g21
I540
g22
S'execfile(filename, namespace)'
tp116
a(g24
I589
g19
S'sgd_optimization_mnist()'
tp117
a(g26
I378
g27
S'classifier = LogisticRegression(input=x, n_in=91, n_out=2)'
tp118
a(g29
I113
g30
S'self.p_y_given_x = T.nnet.softmax(T.dot(input, self.W) + self.b)'
tp119
aasbsg36
Nsg57
g1
(g73
g3
NtRp120
(dp121
g76
(lp122
g1
(g59
g3
NtRp123
(dp124
g9
S'auto_20509'
p125
sg11
Nsg12
(itheano.gof.utils
scratchpad
p126
(dp127
g15
(lp128
(lp129
(g18
I1
g19
Ntp130
a(g21
I540
g22
S'execfile(filename, namespace)'
tp131
a(g24
I589
g19
S'sgd_optimization_mnist()'
tp132
a(g26
I372
g27
S"x = T.matrix('x')  # data, presented as rasterized images"
tp133
aasbsg36
S'x'
sg57
Nsg46
g1
(g47
g3
NtRp134
(dp135
g50
(I00
I00
tp136
sg52
S'float64'
p137
sg54
g43
sg55
I00
sg36
Nsbsbag1
(g6
g3
NtRp138
(dp139
g9
S'auto_20511'
p140
sg11
Nsg12
(itheano.gof.utils
scratchpad
p141
(dp142
g15
(lp143
(lp144
(g18
I1
g19
Ntp145
a(g21
I540
g22
S'execfile(filename, namespace)'
tp146
a(g24
I589
g19
S'sgd_optimization_mnist()'
tp147
a(g26
I378
g27
S'classifier = LogisticRegression(input=x, n_in=91, n_out=2)'
tp148
a(g29
I93
g30
S'borrow=True'
tp149
aasbsg32
g1
(g33
g3
NtRp150
(dp151
g36
S'W'
sg37
(lp152
g39
(g40
(I0
tS'b'
tRp153
(I1
(I91
I2
tg43
I00
S"\xac\xaeaJa\xf1\xf4\xbf\xac\xaeaJa\xf1\xf4?\x1c/9H\\\x1e\xeb\xbf\x1c/9H\\\x1e\xeb?\x9d\xaeL\xfa@\x10\xf7\xbf\x9d\xaeL\xfa@\x10\xf7?g\xc2(\xc9hg\xf9\xbfd\xc2(\xc9hg\xf9?\x8eu\x80\xaa\xcd\xdb\xf3\xbf\x91u\x80\xaa\xcd\xdb\xf3?\xd5}\xb0$in\xfe\xbf\xd6}\xb0$in\xfe?7|\xd2\xa5\x18h\xf7\xbf8|\xd2\xa5\x18h\xf7?\x81\xc7E2\xbf\xd6\xf1\xbf\x82\xc7E2\xbf\xd6\xf1?\xd3\x1d\x7f\xe07-\xf4\xbf\xd3\x1d\x7f\xe07-\xf4?8/\x9dK\xfae\xfa\xbf6/\x9dK\xfae\xfa?V0\xd0\xd0\xadd\xfe\xbfU0\xd0\xd0\xadd\xfe?\x8a&v&K\xa8\xf3\xbf\x89&v&K\xa8\xf3?\xe2\xcf\x17$\xd8\x88\xf6\xbf\xe3\xcf\x17$\xd8\x88\xf6?\xcdT<\x17\xfbE\xf6\xbf\xcbT<\x17\xfbE\xf6?M\xafPU\x90\xdb\xfb\xbfL\xafPU\x90\xdb\xfb?\x04=\x97F\x83-\xf7\xbf\x03=\x97F\x83-\xf7?5i\xe4l\x00k\xf6\xbf3i\xe4l\x00k\xf6?[Ar\xc9\xdf\x96\xf3\xbf\\Ar\xc9\xdf\x96\xf3?Y\x02\x0e\xc1\xba\xc8\xf2\xbf[\x02\x0e\xc1\xba\xc8\xf2?\x06 p c>\xf7\xbf\x06 p c>\xf7?[\x8aD\x86\xb5\xc5\xf3\xbfY\x8aD\x86\xb5\xc5\xf3?\x9bM\xd1\xc2\xa4p\xf2\xbf\x98M\xd1\xc2\xa4p\xf2?\x16\x11\xaf\x87-\xfe\xf0\xbf\x17\x11\xaf\x87-\xfe\xf0?]\xb7\x06u\xdae\xf7\xbf\\\xb7\x06u\xdae\xf7?\xecV\xc2\x86\xe0\x1a\xfc\xbf\xeeV\xc2\x86\xe0\x1a\xfc?'x\x8a\xbbM\xff\xf1\xbf)x\x8a\xbbM\xff\xf1?\xeeDPI\xb2\xb2\xf7\xbf\xedDPI\xb2\xb2\xf7?\x11\xf4\xdc\xca+\x1a\xf8\xbf\x10\xf4\xdc\xca+\x1a\xf8?\x16\xcaV\x1e\xf8\xb2\xfd\xbf\x16\xcaV\x1e\xf8\xb2\xfd?q\xb8hm9r\xf5\xbfp\xb8hm9r\xf5?h:\x0e,\x1cM\xf4\xbfi:\x0e,\x1cM\xf4?\x02\xa27 .\x10\xf5\xbf\x03\xa27 .\x10\xf5?\x07\xb4\x82\xb6\x15\x97\xf6\xbf\x06\xb4\x82\xb6\x15\x97\xf6?\xc8\xe6\xac\n~\x93\xf5\xbf\xc9\xe6\xac\n~\x93\xf5?x\x1c=\x95\xbb\xf9\xfa\xbfz\x1c=\x95\xbb\xf9\xfa?0F\x9f\x06\x81\xbd\xf5\xbf2F\x9f\x06\x81\xbd\xf5?\xa8\x80~\xa0\x0c\xe1\xf7\xbf\xa8\x80~\xa0\x0c\xe1\xf7?7L\xd1\x04\xeb\xc8\xf3\xbf6L\xd1\x04\xeb\xc8\xf3?\x05,W:A\x17\xf6\xbf\x07,W:A\x17\xf6?\x1e\x89g\x02\x94\x03\xf6\xbf\x1e\x89g\x02\x94\x03\xf6?j0\xf8\x81\x99\xa4\xff\xbfg0\xf8\x81\x99\xa4\xff?\x05.\x93l\xd5H\xf5\xbf\x05.\x93l\xd5H\xf5?\xee \xf3\xaa\xa95\xf5\xbf\xec \xf3\xaa\xa95\xf5?C\x03X\xb4=\xde\xf6\xbfD\x03X\xb4=\xde\xf6?\xfa\xaa%_C?\xf7\xbf\xfa\xaa%_C?\xf7?\xbb\x88oE\x14q\xf0\xbf\xbb\x88oE\x14q\xf0?Qc\xad\xf9^\xef\xf5\xbfOc\xad\xf9^\xef\xf5?[\xb6\xfa\xf7\xa4C\xf5\xbf\\\xb6\xfa\xf7\xa4C\xf5?\x1b\xc0\xe9\xdf0\x1e\xf5\xbf\x1a\xc0\xe9\xdf0\x1e\xf5?\x85&\xc29H\xe3\xf6\xbf\x85&\xc29H\xe3\xf6?^#,\x1b\xab%\xf7\xbf]#,\x1b\xab%\xf7?X\x19y<\x0c\r\xf3\xbfY\x19y<\x0c\r\xf3?\xbb\xad\xa3F\xd6\x19\xfa\xbf\xb9\xad\xa3F\xd6\x19\xfa?%\x1d\r\x87\x81\x0e\xf0\xbf%\x1d\r\x87\x81\x0e\xf0?y\xe0\xbe\x95\x87\xd0\xf4\xbfx\xe0\xbe\x95\x87\xd0\xf4?y\x82\x14\x8d\xc1\xc3\xf2\xbfx\x82\x14\x8d\xc1\xc3\xf2?\x9e,1\xdd\x14\x03\xf5\xbf\x9e,1\xdd\x14\x03\xf5?\xf2\xb42\xb7\xd5\xce\xf8\xbf\xf3\xb42\xb7\xd5\xce\xf8?\xd5\x81>\xe8A\xff\xef\xbf\xd5\x81>\xe8A\xff\xef?\x1a\x8ehQ\x86\xe0\xf7\xbf\x1c\x8ehQ\x86\xe0\xf7?\x81\t^\\H\xd6\xf9\xbf\x80\t^\\H\xd6\xf9?\xd8\xf0\xef\xc3\x84y\xf8\xbf\xd8\xf0\xef\xc3\x84y\xf8?H+\x91\xbd\xcc\x07\xed\xbfJ+\x91\xbd\xcc\x07\xed?z\xee=\xd3\xb3\xbc\xf6\xbf|\xee=\xd3\xb3\xbc\xf6?\x1e\xf04\x85\x80\xfc\xf5\xbf\x1f\xf04\x85\x80\xfc\xf5?\xbb~@\xaf'\xdc\xf7\xbf\xbc~@\xaf'\xdc\xf7?\\\r\x08\xdb\x87\xfc\xf2\xbf\\\r\x08\xdb\x87\xfc\xf2?\xd3\xfb#\x17\xf8\xdb\xf5\xbf\xd4\xfb#\x17\xf8\xdb\xf5?\xcb\x83\x0b\xa4\x1b5\xf1\xbf\xcb\x83\x0b\xa4\x1b5\xf1?\x84\xee\x15\x86\xc3\xab\xf4\xbf\x85\xee\x15\x86\xc3\xab\xf4?\x18)Y\x8b\x80\xff\xf6\xbf\x1a)Y\x8b\x80\xff\xf6?S\xaa\xa5\x19\xec:\xf4\xbfS\xaa\xa5\x19\xec:\xf4?\xf9\x913\xb4V\xa7\xf8\xbf\xf7\x913\xb4V\xa7\xf8?Y\x1bB\x14\t\xbb\xf9\xbf[\x1bB\x14\t\xbb\xf9?$\x13c\xab\x7f\xa9\xf0\xbf$\x13c\xab\x7f\xa9\xf0?\xb4\x9d\xa9\x10\xcf\x95\xf8\xbf\xb4\x9d\xa9\x10\xcf\x95\xf8?\xb9\xe5\xcb\xd3\x82\xd5\xf4\xbf\xb9\xe5\xcb\xd3\x82\xd5\xf4?I\x81\x0b\xfd\x1f\xc9\xf9\xbfG\x81\x0b\xfd\x1f\xc9\xf9?w\xb7b\xfeHX\xf6\xbf{\xb7b\xfeHX\xf6?&\x94L\x1eb\xee\xeb\xbf$\x94L\x1eb\xee\xeb?\x99\xa7\x04\xf3\x1d\xd3\xf6\xbf\x98\xa7\x04\xf3\x1d\xd3\xf6?\xae\x84-\x15\x13\xfe\xea\xbf\xb1\x84-\x15\x13\xfe\xea?\x1c`2\xf5\xcd\x0f\xfa\xbf\x1b`2\xf5\xcd\x0f\xfa?=\xf5\xdfas\xa6\xf6\xbf=\xf5\xdfas\xa6\xf6?\xe6}| \x99\xff\xf1\xbf\xe4}| \x99\xff\xf1?r\x9d\xcd\x81\x18\x96\xf7\xbfq\x9d\xcd\x81\x18\x96\xf7?\x919\xf8\x0f\xb9\xe6\xf4\xbf\x8f9\xf8\x0f\xb9\xe6\xf4?\xf2&^\xfa\x116\xf6\xbf\xf1&^\xfa\x116\xf6?3\xc5G?X}\xf0\xbf3\xc5G?X}\xf0?\x9a$\x83q\x00}\xf5\xbf\x9b$\x83q\x00}\xf5?\x81\xd1\xf8\x8e-\xf7\xf2\xbf\x83\xd1\xf8\x8e-\xf7\xf2?"
tbasg44
I00
sg45
I00
sg46
g1
(g47
g3
NtRp154
(dp155
g50
(I00
I00
tp156
sg52
S'float64'
p157
sg54
g43
sg55
I00
sg36
Nsbsg56
Nsbsg36
S'W'
sg57
Nsg46
g154
sbasg12
(itheano.gof.utils
scratchpad
p158
(dp159
bsS'outputs'
p160
(lp161
g108
asS'op'
p162
g1
(ctheano.tensor.basic
Dot
p163
g3
NtRp164
(dp165
S'_op_use_c_code'
p166
S'/usr/bin/g++'
p167
sbsbsg46
g1
(g47
g3
NtRp168
(dp169
g50
(I00
I00
tp170
sg52
S'float64'
p171
sg54
g43
sg55
I00
sg36
Nsbsbag1
(g59
g3
NtRp172
(dp173
g9
S'auto_20517'
p174
sg11
I0
sg12
(itheano.gof.utils
scratchpad
p175
(dp176
g15
(lp177
(lp178
(g18
I1
g19
Ntp179
a(g21
I540
g22
S'execfile(filename, namespace)'
tp180
a(g24
I589
g19
S'sgd_optimization_mnist()'
tp181
a(g26
I378
g27
S'classifier = LogisticRegression(input=x, n_in=91, n_out=2)'
tp182
a(g29
I113
g30
S'self.p_y_given_x = T.nnet.softmax(T.dot(input, self.W) + self.b)'
tp183
aasbsg36
Nsg57
g1
(g73
g3
NtRp184
(dp185
g76
(lp186
g7
asg12
(itheano.gof.utils
scratchpad
p187
(dp188
bsg160
(lp189
g172
asg162
g1
(ctheano.tensor.elemwise
DimShuffle
p190
g3
NtRp191
(dp192
S'drop'
p193
(lp194
sS'shuffle'
p195
(lp196
I0
asS'augment'
p197
(lp198
I0
asS'input_broadcastable'
p199
g51
sS'inplace'
p200
I00
sS'new_order'
p201
(S'x'
I0
tp202
sg166
g167
sbsbsg46
g1
(g47
g3
NtRp203
(dp204
g50
(I01
I00
tp205
sg52
g53
sg54
g43
sg55
I00
sg36
Nsbsbasg12
(itheano.gof.utils
scratchpad
p206
(dp207
bsg160
(lp208
g93
asg162
g1
(ctheano.tensor.elemwise
Elemwise
p209
g3
NtRp210
(dp211
S'__module__'
p212
S'tensor'
p213
sS'scalar_op'
p214
g1
(ctheano.scalar.basic
Add
p215
g3
NtRp216
(dp217
S'output_types_preference'
p218
ctheano.scalar.basic
upcast_out
p219
sg166
g167
sg36
S'add'
p220
sbsg36
S'Elemwise{add,no_inplace}'
p221
sg166
g167
sS'destroy_map'
p222
(dp223
sS'nfunc_spec'
p224
(S'add'
I2
I1
tp225
sS'inplace_pattern'
p226
(dp227
sS'openmp'
p228
I00
sS'__doc__'
p229
S"elementwise addition\n\n    Generalizes a scalar op to tensors.\n\n    All the inputs must have the same number of dimensions. When the\n    Op is performed, for each dimension, each input's size for that\n    dimension must be the same. As a special case, it can also be 1\n    but only if the input's broadcastable flag is True for that\n    dimension. In that case, the tensor is (virtually) replicated\n    along that dimension to match the size of the others.\n\n    The dtypes of the outputs mirror those of the scalar Op that is\n    being generalized to tensors. In particular, if the calculations\n    for an output are done inplace on an input, the output type must\n    be the same as the corresponding input type (see the doc of\n    scalar.ScalarOp to get help about controlling the output type)\n\n    Parameters\n    ----------\n    scalar_op\n        An instance of a subclass of scalar.ScalarOp which works uniquely\n        on scalars.\n    inplace_pattern\n        A dictionary that maps the index of an output to the\n        index of an input so the output is calculated inplace using\n        the input's storage. (Just like destroymap, but without the lists.)\n    nfunc_spec\n        Either None or a tuple of three elements,\n        (nfunc_name, nin, nout) such that getattr(numpy, nfunc_name)\n        implements this operation, takes nin inputs and nout outputs.\n        Note that nin cannot always be inferred from the scalar op's\n        own nin field because that value is sometimes 0 (meaning a\n        variable number of inputs), whereas the numpy function may\n        not have varargs.\n\n    Examples\n    --------\n    Elemwise(add) # represents + on tensors (x + y)\n    Elemwise(add, {0 : 0}) # represents the += operation (x += y)\n    Elemwise(add, {0 : 1}) # represents += on the second argument (y += x)\n    Elemwise(mul)(rand(10, 5), rand(1, 5)) # the second input is completed\n    # along the first dimension to match the first input\n    Elemwise(true_div)(rand(10, 5), rand(10, 1)) # same but along the\n    # second dimension\n    Elemwise(int_div)(rand(1, 5), rand(10, 1)) # the output has size (10, 5)\n    Elemwise(log)(rand(3, 4, 5))\n\n    "
p230
sbsbsg46
g1
(g47
g3
NtRp231
(dp232
g50
(I00
I00
tp233
sg52
g137
sg54
g43
sg55
I00
sg36
Nsbsbasg12
(itheano.gof.utils
scratchpad
p234
(dp235
bsg160
(lp236
g78
asg162
g1
(ctheano.tensor.nnet.nnet
Softmax
p237
g3
NtRp238
(dp239
g166
g167
sbsbsg46
g231
sbag1
(ctheano.tensor.var
TensorConstant
p240
g3
NtRp241
(dp242
g9
S'auto_56'
p243
sg11
Nsg12
(itheano.gof.utils
scratchpad
p244
(dp245
S'unique_value'
p246
cnumpy.core.multiarray
scalar
p247
(g42
(S'i8'
I0
I1
tRp248
(I3
S'<'
NNNI-1
I-1
I0
tbS'\x01\x00\x00\x00\x00\x00\x00\x00'
tRp249
sbsg36
NsS'cached'
p250
I01
sg46
g1
(g47
g3
NtRp251
(dp252
g50
(I01
tp253
sg52
S'int64'
p254
sg54
g248
sg55
I00
sg36
NsbsS'data'
p255
g39
(g40
(I0
tS'b'
tRp256
(I1
(I1
tg248
I00
S'\x01\x00\x00\x00\x00\x00\x00\x00'
tbsbasg12
(itheano.gof.utils
scratchpad
p257
(dp258
bsg160
(lp259
g1
(g59
g3
NtRp260
(dp261
g9
S'auto_20521'
p262
sg11
I0
sg12
(itheano.gof.utils
scratchpad
p263
(dp264
g15
(lp265
(lp266
(g18
I1
g19
Ntp267
a(g21
I540
g22
S'execfile(filename, namespace)'
tp268
a(g24
I589
g19
S'sgd_optimization_mnist()'
tp269
a(g26
I378
g27
S'classifier = LogisticRegression(input=x, n_in=91, n_out=2)'
tp270
a(g29
I117
g30
S'self.y_pred = T.argmax(self.p_y_given_x, axis=1)'
tp271
aasbsg36
S'max'
p272
sg57
g74
sg46
g1
(g47
g3
NtRp273
(dp274
g50
(I00
tp275
sg52
g137
sg54
g43
sg55
I00
sg36
Nsbsbag60
asg162
g1
(ctheano.tensor.basic
MaxAndArgmax
p276
g3
NtRp277
(dp278
g166
g167
sbsbsg46
g1
(g47
g3
NtRp279
(dp280
g50
(I00
tp281
sg52
S'int64'
p282
sg54
g248
sg55
I00
sg36
NsbsbsS'params'
p283
(lp284
g138
ag7
asS'W'
g138
sS'input'
p285
g123
sS'p_y_given_x'
p286
g78
sb.